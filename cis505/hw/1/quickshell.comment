     1	#include <stdio.h>
     2	#include <stdlib.h>
     3	#include <signal.h>
     4	#include <unistd.h>
     5	
     6	void signalarm();
     7	pid_t child;
     8	//state indicating how and when the child dies
     9	static state = 0;
    10	
    11	int main()
    12	{
    13	    int read_t;
    14	    int write_t;
    15	    char buf[512];
    16	    int err;
    17	    int status;
    18	
    19	    //set up alarm signal call back function
    20	    signal(SIGALRM, signalarm);
    21	
    22	
    23	    while(1)
    24	    {
    25	        //prompt
    26	        write(STDOUT_FILENO, ">", 1);
    27	
    28	        //get user input from standard output
    29	        read_t = read(STDIN_FILENO, buf, 512);
    30	        if (read_t == -1)
    31	        {
    32	            write(STDERR_FILENO, "can't read msg!\n", 16);
    33	            _exit(1);
    34	        }
    35	
    36	        child = fork();
    37	        if (child == -1)
    38	        {
    39	            write(STDERR_FILENO, "can't fork a child!\n", 20);
    40	            _exit(1);
    41	        }
    42	
    43	        if (child == 0)
    44	        {
    45	            //child
    46	            //remove last newline symbol
    47	            buf[read_t - 1] = 0;
    48	            //execute corresponding command or file
    49	            err = execl(buf, buf, NULL);
    50	            if (err != 0)
    51	            {
    52	                write(STDERR_FILENO, "execute file error!\n", 20);
    53	                _exit(1);
    54	            }
    55	            _exit(0);
    56	        }
    57	        else
    58	        {
    59	            //father
    60	            //set first alarm
    61	            alarm(2);
    62	            //wait for child's death
    63	            wait(&status);
    64	            //cancel alarm, because this round is over
    65	            alarm(0);
    66	
    67	            //child abnormally exit, skip msg printing
    68	            if (status != 0)
    69	                continue;
    70	            //print msg according to the state which inidicates the used time
    71	            switch (state) 
    72	            {
    73	                case 0://< 2 second
    74	                    {
    75	                        write(STDOUT_FILENO, "Wow, that was fast!\n", 20);
    76	                        break;
    77	                    }
    78	                case 1:// 2 second < < 5 second
    79	                    {
    80	                        write(STDOUT_FILENO, "That wasn't very fast\n", 22);
    81	                        break;
    82	                    }
    83	                case 2:// 5 second < < 10 second
    84	                    {
    85	                        write(STDOUT_FILENO, "What took so long?\n", 19);
    86	                        break;
    87	                    }
    88	                case 3:// > 10 second
    89	                    {
    90	                        break;
    91	                    }
    92	                default:
    93	                    {
    94	                        write(STDOUT_FILENO, 
    95	                              "internal error: unexpected state!\n", 34);
    96	                    }
    97	            }
    98	            //reset state
    99	            state = 0;
   100	        }
   101	
   102	    }
   103	    return 0;
   104	
   105	}
   106	
   107	void signalarm()
   108	{
   109	    //state value:0-- 2 second, 1-- 5 second, 
   110	    //            2-- 10 second, 3-- child is murdered 
   111	    switch (state)
   112	    {
   113	        case 0:
   114	            {
   115	                state++;
   116	                //set alarm incrementally
   117	                alarm(3);
   118	                break;
   119	            }
   120	        case 1:
   121	            {
   122	                write(STDOUT_FILENO, "This is taking much too long!\n", 31);
   123	                state++;
   124	                //set alarm incrementally
   125	                alarm(5);
   126	                break;
   127	            }
   128	        case 2:
   129	            {
   130	                write(STDOUT_FILENO, "I've had enough of this!\n", 25);
   131	                state++;
   132	                kill(child, SIGKILL);
   133	                break;
   134	            }
   135	        default:
   136	            {
   137	                write(STDOUT_FILENO, 
   138	                      "internal error: unexpected state!\n", 34);
   139	
   140	            }
   141	    }
   142	}

   Description:
-Get command to run programs. From line 25 to line 34, the quickshell provides
a ">" prompt by using "write" system call to write output a string to standard
output, and waits for the name of a program that user wants to run. The content
from user is received by incurring "read" system call to read from standard
input.

-Run program in child process, giving corresponding message at certain time
points. The code from line 36 to 41 will fork a child process, but exit the 
quickshell if the fork operation fails. From line 45 to 58, the child process
will execute program provided by user by calling "execl" system call, or 
gives an error message and exits with non-zero status if the execution does
not return normal value 0. From line 59 to 100, the father process will set
first 2-second alarm and waits for child's death. After child ends, it will 
choose to print messages according to the "state" variable or will simply
restart another round of shell execution if child does not exit normally.

-How alarm signals are handled. There are 4 values of variable "state", where
first three tell in which time period the executed program ends, and the last
one indicates the child is killed by father process. In "signalarm" function,
the first three states are handled properly by changing "state" to subsequent
"state", and setting new alarm or killing the child. Abnormal "state" value
is also handled.
