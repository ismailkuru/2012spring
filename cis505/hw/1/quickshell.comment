     1	#include <stdio.h>
     2	#include <stdlib.h>
     3	#include <signal.h>
     4	#include <unistd.h>
     5	
     6	void signalarm();
     7	pid_t child;
     8	//state indicating how and when the child dies
     9	static state = 0;
    10	
    11	int main()
    12	{
    13	    int read_t;
    14	    int write_t;
    15	    char buf[512];
    16	    int err;
    17	    int status;
    18	
    19	    //set up alarm signal call back function
    20	    signal(SIGALRM, signalarm);
    21	
    22	
    23	    while(1)
    24	    {
    25	        //reset state
    26	        state = 0;
    27	
    28	        //prompt
    29	        write(STDOUT_FILENO, ">", 1);
    30	
    31	        //get user input from standard output, at most 512 chars
    32	        read_t = read(STDIN_FILENO, buf, 512);
    33	        if (read_t == -1)
    34	        {
    35	            write(STDERR_FILENO, "can't read msg!\n", 16);
    36	            _exit(1);
    37	        }
    38	
    39	        //get EOF
    40	        if (read_t == 0)
    41	            break;
    42	
    43	        child = fork();
    44	        if (child == -1)
    45	        {
    46	            write(STDERR_FILENO, "can't fork a child!\n", 20);
    47	            _exit(1);
    48	        }
    49	
    50	        if (child == 0)
    51	        {
    52	            //child
    53	            //remove last newline symbol
    54	            buf[read_t - 1] = 0;
    55	            //execute corresponding command or file
    56	            err = execl(buf, buf, NULL);
    57	            if (err != 0)
    58	            {
    59	                write(STDERR_FILENO, "execute file error!\n", 20);
    60	                _exit(1);
    61	            }
    62	            _exit(0);
    63	        }
    64	        else
    65	        {
    66	            //father
    67	            //set first alarm
    68	            alarm(2);
    69	            //wait for child's death
    70	            wait(&status);
    71	            //cancel alarm, because this round is over
    72	            alarm(0);
    73	
    74	            //child abnormally exit, skip msg printing
    75	            if (status != 0)
    76	                continue;
    77	            //print msg according to the state which inidicates the used time
    78	            switch (state) 
    79	            {
    80	                case 0://< 2 second
    81	                    {
    82	                        write(STDOUT_FILENO, "Wow, that was fast!\n", 20);
    83	                        break;
    84	                    }
    85	                case 1:// 2 second < < 5 second
    86	                    {
    87	                        write(STDOUT_FILENO, "That wasn't very fast\n", 22);
    88	                        break;
    89	                    }
    90	                case 2:// 5 second < < 10 second
    91	                    {
    92	                        write(STDOUT_FILENO, "What took so long?\n", 19);
    93	                        break;
    94	                    }
    95	                case 3:// > 10 second
    96	                    {
    97	                        break;
    98	                    }
    99	                default:
   100	                    {
   101	                        write(STDOUT_FILENO, 
   102	                              "internal error: unexpected state!\n", 34);
   103	                    }
   104	            }
   105	        }
   106	
   107	    }
   108	    return 0;
   109	
   110	}
   111	
   112	void signalarm()
   113	{
   114	    //state value:0-- 2 second, 1-- 5 second, 
   115	    //            2-- 10 second, 3-- child is murdered 
   116	    switch (state)
   117	    {
   118	        case 0:
   119	            {
   120	                state++;
   121	                //set alarm incrementally
   122	                alarm(3);
   123	                break;
   124	            }
   125	        case 1:
   126	            {
   127	                write(STDOUT_FILENO, "This is taking much too long!\n", 31);
   128	                state++;
   129	                //set alarm incrementally
   130	                alarm(5);
   131	                break;
   132	            }
   133	        case 2:
   134	            {
   135	                write(STDOUT_FILENO, "I've had enough of this!\n", 25);
   136	                state++;
   137	                kill(child, SIGKILL);
   138	                break;
   139	            }
   140	        default:
   141	            {
   142	                write(STDOUT_FILENO, 
   143	                      "internal error: unexpected state!\n", 34);
   144	
   145	            }
   146	    }
   147	}


Description:
-Get command to run programs. From line 28 to line 37, the quickshell provides
a ">" prompt by using "write" system call to write output a string to standard
output, and waits for the name of a program that user wants to run. The content
from user is received by incurring "read" system call to read from standard
input. The code between line 39 and 41 will exit the shell when EOF is
encountered.

-Run program in child process, giving corresponding message at certain time
points. The code from line 43 to 48 will try to fork a child process, but exit
the quickshell if the fork operation fails. From line 50 to 63, the child
process will execute program provided by user by calling "execl" system call,
or gives an error message and exits with non-zero status if the execution does
not return normal value 0. From line 66 to 105, the father process will set
first 2-second alarm and waits for child's death. After child ends, it will
choose to print messages according to the "state" variable or will simply
restart another round of shell execution if child does not exit normally.

-How alarm signals are handled. The alarm handling function is from line 112 to
147. There are 4 values (0,1,2,3) of variable "state", where first three tell
in which time period the executed program ends, and the last one indicates the
child is killed by father process. In "signalarm" function, the first three 
states are handled properly by changing "state" to subsequent "state", and 
setting new alarm or killing the child. Abnormal "state" value is also handled.
